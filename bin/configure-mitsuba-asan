#!/usr/bin/env bash
set -e

cd $PROJECT_ROOT

cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=on\
	-DCMAKE_BUILD_TYPE=RelWithDebInfo\
	-DMI_SANITIZE_ADDRESS=on\
	-G Ninja -S mitsuba3/ -B mitsuba3/build-mitsuba-asan

# NOTE:
# compile with:
#
# # Clang/GCC address sanitizer
# if ((MI_SANITIZE_ADDRESS OR MI_SANITIZE_MEMORY) AND
#     (CMAKE_CXX_COMPILER_ID MATCHES "(GNU|Clang)"))
#   # Don't optimize too heavily
#   if (U_CMAKE_BUILD_TYPE MATCHES REL)
#     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -O1")
#     set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -O1")
#     add_compile_options(-O1 -fno-optimize-sibling-calls)
#   endif()
#
#   add_compile_options(-fno-omit-frame-pointer)
#
#   if (MI_SANITIZE_ADDRESS)
#     # set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address")
#     # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
#     # set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
#     # set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address")
#     # target_compile_options(mitsuba PUBLIC -fsanitize=address)
#     # target_link_options(mitsuba PUBLIC -fsanitize=address)
#     add_compile_options(-fsanitize=address)
#     add_link_options(-fsanitize=address)
#     message(STATUS "Mitsuba: enabling the address sanitizer.")
#   endif()
#
#   if (MI_SANITIZE_MEMORY)
#     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=memory")
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=memory")
#     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory")
#     set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=memory")
#     message(STATUS "Mitsuba: enabling the memory sanitizer.")
#   endif()
# endif()
